=begin
#Corporate number system API v4

#Corporate number system API v4

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.1

=end

require 'date'
require 'time'

module CnsOpenapiRubyClient
  # 法人種別を判別するためのデータ項目。
  class Corporation
    # 一連番号
    attr_accessor :sequence_number

    # 法人番号の指定を受けた者（以下「法人番号保有者」という。）の 法人番号を示すデータ項目。
    attr_accessor :corporate_number

    attr_accessor :process

    attr_accessor :correct

    # 法務省等からデータを受け取り、当庁でデータを更新した日付を表す。
    attr_accessor :update_date

    # 事由が発生した日付を表すデータ項目。
    attr_accessor :change_date

    # 法人番号保有者の商号又は名称を示すデータ項目。
    attr_accessor :name

    # 商号又は名称イメージIDは、 イメージファイルを閲覧するために指定する値（情報）。
    attr_accessor :name_image_id

    attr_accessor :kind

    # 法人番号保有者の本店又は主たる事務所の所在地の都道府県名。
    attr_accessor :prefecture_name

    # 法人番号保有者の本店又は主たる事務所の所在地の市区町村名。
    attr_accessor :city_name

    # 法人番号保有者の本店又は主たる事務所の所在地の丁目番地等。
    attr_accessor :street_number

    # 国内所在地イメージIDは、 イメージファイルを閲覧するために指定する値（情報）。
    attr_accessor :address_image_id

    # 都道府県コード。データを取り込み、名寄せ作業や不要なデータを識別する際、 当該コードを活用することにより、効率的な作業を行うことができる。
    attr_accessor :prefecture_code

    # 市区町村コード
    attr_accessor :city_code

    # 国内所在地の文字情報を基に設定した郵便番号。
    attr_accessor :post_code

    # 本店又は主たる事務所の所在地が国外にある法人番号保有者の 国外における本店又は主たる事務所の所在地を示すデータ項目。
    attr_accessor :address_outside

    # 国外所在地イメージIDは、 イメージファイルを閲覧するために指定する値（情報）。
    attr_accessor :address_outside_image_id

    # 登記記録の閉鎖等の事由が生じた年月日を表す。
    attr_accessor :close_date

    # 閉鎖の事由は、登記記録の閉鎖等が生じた事由を表すデータ項目。
    attr_accessor :close_cause

    # 合併等による事業承継があったことにより 登記記録が閉鎖された場合の存続する法人の法人番号。
    attr_accessor :successor_corporate_number

    # 合併等による事業承継があった場合の事業承継内容を示すデータ項目。
    attr_accessor :change_cause

    # 法人番号指定年月日は、法人番号が指定された年月日を表す。
    attr_accessor :assignment_date

    # 応答結果のデータが、最新の情報か過去の情報かを表す。
    attr_accessor :latest

    # 法人番号保有者が登録した商号又は名称（英語表記）。
    attr_accessor :en_name

    # 法人番号保有者が登録した本店又は主たる事務所の 所在地の都道府県名（英語表記）。
    attr_accessor :en_prefecture_name

    # 法人番号保有者が登録した本店又は主たる事務所の 所在地の丁目番地等（英語表記）。
    attr_accessor :en_city_name

    # 本店又は主たる事務所の所在地が国外にある法人番号保有者が 登録した国外における本店又は主たる事務所の所在地（英語表記）。
    attr_accessor :en_address_outside

    # 法人番号保有者の商号又は名称に対するフリガナ情報を示すデータ項目。
    attr_accessor :furigana

    # 設立登記法人のうち、登記上の所在地が、住居表示の実施や区画整理等で 既に廃止されており、現在では存在しない住所表記となっていることが 確認できた法人について、検索対象から除外していることを示すデータ項目。
    attr_accessor :hihyoji

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sequence_number' => :'sequenceNumber',
        :'corporate_number' => :'corporateNumber',
        :'process' => :'process',
        :'correct' => :'correct',
        :'update_date' => :'updateDate',
        :'change_date' => :'changeDate',
        :'name' => :'name',
        :'name_image_id' => :'nameImageId',
        :'kind' => :'kind',
        :'prefecture_name' => :'prefectureName',
        :'city_name' => :'cityName',
        :'street_number' => :'streetNumber',
        :'address_image_id' => :'addressImageId',
        :'prefecture_code' => :'prefectureCode',
        :'city_code' => :'cityCode',
        :'post_code' => :'postCode',
        :'address_outside' => :'addressOutside',
        :'address_outside_image_id' => :'addressOutsideImageId',
        :'close_date' => :'closeDate',
        :'close_cause' => :'closeCause',
        :'successor_corporate_number' => :'successorCorporateNumber',
        :'change_cause' => :'changeCause',
        :'assignment_date' => :'assignmentDate',
        :'latest' => :'latest',
        :'en_name' => :'enName',
        :'en_prefecture_name' => :'enPrefectureName',
        :'en_city_name' => :'enCityName',
        :'en_address_outside' => :'enAddressOutside',
        :'furigana' => :'furigana',
        :'hihyoji' => :'hihyoji'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sequence_number' => :'Integer',
        :'corporate_number' => :'Integer',
        :'process' => :'ProcessCodeType',
        :'correct' => :'CorrectCodeType',
        :'update_date' => :'Date',
        :'change_date' => :'Date',
        :'name' => :'String',
        :'name_image_id' => :'Integer',
        :'kind' => :'CorporateType',
        :'prefecture_name' => :'String',
        :'city_name' => :'String',
        :'street_number' => :'String',
        :'address_image_id' => :'Integer',
        :'prefecture_code' => :'Integer',
        :'city_code' => :'Integer',
        :'post_code' => :'Integer',
        :'address_outside' => :'String',
        :'address_outside_image_id' => :'Integer',
        :'close_date' => :'Date',
        :'close_cause' => :'String',
        :'successor_corporate_number' => :'Integer',
        :'change_cause' => :'String',
        :'assignment_date' => :'Date',
        :'latest' => :'Integer',
        :'en_name' => :'String',
        :'en_prefecture_name' => :'String',
        :'en_city_name' => :'String',
        :'en_address_outside' => :'String',
        :'furigana' => :'String',
        :'hihyoji' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `CnsOpenapiRubyClient::Corporation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `CnsOpenapiRubyClient::Corporation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sequence_number')
        self.sequence_number = attributes[:'sequence_number']
      end

      if attributes.key?(:'corporate_number')
        self.corporate_number = attributes[:'corporate_number']
      end

      if attributes.key?(:'process')
        self.process = attributes[:'process']
      end

      if attributes.key?(:'correct')
        self.correct = attributes[:'correct']
      end

      if attributes.key?(:'update_date')
        self.update_date = attributes[:'update_date']
      end

      if attributes.key?(:'change_date')
        self.change_date = attributes[:'change_date']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'name_image_id')
        self.name_image_id = attributes[:'name_image_id']
      end

      if attributes.key?(:'kind')
        self.kind = attributes[:'kind']
      end

      if attributes.key?(:'prefecture_name')
        self.prefecture_name = attributes[:'prefecture_name']
      end

      if attributes.key?(:'city_name')
        self.city_name = attributes[:'city_name']
      end

      if attributes.key?(:'street_number')
        self.street_number = attributes[:'street_number']
      end

      if attributes.key?(:'address_image_id')
        self.address_image_id = attributes[:'address_image_id']
      end

      if attributes.key?(:'prefecture_code')
        self.prefecture_code = attributes[:'prefecture_code']
      end

      if attributes.key?(:'city_code')
        self.city_code = attributes[:'city_code']
      end

      if attributes.key?(:'post_code')
        self.post_code = attributes[:'post_code']
      end

      if attributes.key?(:'address_outside')
        self.address_outside = attributes[:'address_outside']
      end

      if attributes.key?(:'address_outside_image_id')
        self.address_outside_image_id = attributes[:'address_outside_image_id']
      end

      if attributes.key?(:'close_date')
        self.close_date = attributes[:'close_date']
      end

      if attributes.key?(:'close_cause')
        self.close_cause = attributes[:'close_cause']
      end

      if attributes.key?(:'successor_corporate_number')
        self.successor_corporate_number = attributes[:'successor_corporate_number']
      end

      if attributes.key?(:'change_cause')
        self.change_cause = attributes[:'change_cause']
      end

      if attributes.key?(:'assignment_date')
        self.assignment_date = attributes[:'assignment_date']
      end

      if attributes.key?(:'latest')
        self.latest = attributes[:'latest']
      end

      if attributes.key?(:'en_name')
        self.en_name = attributes[:'en_name']
      end

      if attributes.key?(:'en_prefecture_name')
        self.en_prefecture_name = attributes[:'en_prefecture_name']
      end

      if attributes.key?(:'en_city_name')
        self.en_city_name = attributes[:'en_city_name']
      end

      if attributes.key?(:'en_address_outside')
        self.en_address_outside = attributes[:'en_address_outside']
      end

      if attributes.key?(:'furigana')
        self.furigana = attributes[:'furigana']
      end

      if attributes.key?(:'hihyoji')
        self.hihyoji = attributes[:'hihyoji']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/(北海道|青森県|岩手県|宮城県|秋田県|山形県|福島県|茨城県|栃木県|群馬県|埼玉県|千葉県|東京都|神奈川県|新潟県|富山県|石川県|福井県|山梨県|長野県|岐阜県|静岡県|愛知県|三重県|滋賀県|京都府|大阪府|兵庫県|奈良県|和歌山県|鳥取県|島根県|岡山県|広島県|山口県|徳島県|香川県|愛媛県|高知県|福岡県|佐賀県|長崎県|熊本県|大分県|宮崎県|鹿児島県|沖縄県)/)
      if !@prefecture_name.nil? && @prefecture_name !~ pattern
        invalid_properties.push("invalid value for \"prefecture_name\", must conform to the pattern #{pattern}.")
      end

      if !@prefecture_code.nil? && @prefecture_code > 47
        invalid_properties.push('invalid value for "prefecture_code", must be smaller than or equal to 47.')
      end

      if !@prefecture_code.nil? && @prefecture_code < 1
        invalid_properties.push('invalid value for "prefecture_code", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@prefecture_name.nil? && @prefecture_name !~ Regexp.new(/(北海道|青森県|岩手県|宮城県|秋田県|山形県|福島県|茨城県|栃木県|群馬県|埼玉県|千葉県|東京都|神奈川県|新潟県|富山県|石川県|福井県|山梨県|長野県|岐阜県|静岡県|愛知県|三重県|滋賀県|京都府|大阪府|兵庫県|奈良県|和歌山県|鳥取県|島根県|岡山県|広島県|山口県|徳島県|香川県|愛媛県|高知県|福岡県|佐賀県|長崎県|熊本県|大分県|宮崎県|鹿児島県|沖縄県)/)
      return false if !@prefecture_code.nil? && @prefecture_code > 47
      return false if !@prefecture_code.nil? && @prefecture_code < 1
      close_cause_validator = EnumAttributeValidator.new('String', ["01", "11", "21", "31"])
      return false unless close_cause_validator.valid?(@close_cause)
      latest_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless latest_validator.valid?(@latest)
      hihyoji_validator = EnumAttributeValidator.new('Integer', [0, 1])
      return false unless hihyoji_validator.valid?(@hihyoji)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] prefecture_name Value to be assigned
    def prefecture_name=(prefecture_name)
      pattern = Regexp.new(/(北海道|青森県|岩手県|宮城県|秋田県|山形県|福島県|茨城県|栃木県|群馬県|埼玉県|千葉県|東京都|神奈川県|新潟県|富山県|石川県|福井県|山梨県|長野県|岐阜県|静岡県|愛知県|三重県|滋賀県|京都府|大阪府|兵庫県|奈良県|和歌山県|鳥取県|島根県|岡山県|広島県|山口県|徳島県|香川県|愛媛県|高知県|福岡県|佐賀県|長崎県|熊本県|大分県|宮崎県|鹿児島県|沖縄県)/)
      if !prefecture_name.nil? && prefecture_name !~ pattern
        fail ArgumentError, "invalid value for \"prefecture_name\", must conform to the pattern #{pattern}."
      end

      @prefecture_name = prefecture_name
    end

    # Custom attribute writer method with validation
    # @param [Object] prefecture_code Value to be assigned
    def prefecture_code=(prefecture_code)
      if !prefecture_code.nil? && prefecture_code > 47
        fail ArgumentError, 'invalid value for "prefecture_code", must be smaller than or equal to 47.'
      end

      if !prefecture_code.nil? && prefecture_code < 1
        fail ArgumentError, 'invalid value for "prefecture_code", must be greater than or equal to 1.'
      end

      @prefecture_code = prefecture_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] close_cause Object to be assigned
    def close_cause=(close_cause)
      validator = EnumAttributeValidator.new('String', ["01", "11", "21", "31"])
      unless validator.valid?(close_cause)
        fail ArgumentError, "invalid value for \"close_cause\", must be one of #{validator.allowable_values}."
      end
      @close_cause = close_cause
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] latest Object to be assigned
    def latest=(latest)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(latest)
        fail ArgumentError, "invalid value for \"latest\", must be one of #{validator.allowable_values}."
      end
      @latest = latest
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hihyoji Object to be assigned
    def hihyoji=(hihyoji)
      validator = EnumAttributeValidator.new('Integer', [0, 1])
      unless validator.valid?(hihyoji)
        fail ArgumentError, "invalid value for \"hihyoji\", must be one of #{validator.allowable_values}."
      end
      @hihyoji = hihyoji
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sequence_number == o.sequence_number &&
          corporate_number == o.corporate_number &&
          process == o.process &&
          correct == o.correct &&
          update_date == o.update_date &&
          change_date == o.change_date &&
          name == o.name &&
          name_image_id == o.name_image_id &&
          kind == o.kind &&
          prefecture_name == o.prefecture_name &&
          city_name == o.city_name &&
          street_number == o.street_number &&
          address_image_id == o.address_image_id &&
          prefecture_code == o.prefecture_code &&
          city_code == o.city_code &&
          post_code == o.post_code &&
          address_outside == o.address_outside &&
          address_outside_image_id == o.address_outside_image_id &&
          close_date == o.close_date &&
          close_cause == o.close_cause &&
          successor_corporate_number == o.successor_corporate_number &&
          change_cause == o.change_cause &&
          assignment_date == o.assignment_date &&
          latest == o.latest &&
          en_name == o.en_name &&
          en_prefecture_name == o.en_prefecture_name &&
          en_city_name == o.en_city_name &&
          en_address_outside == o.en_address_outside &&
          furigana == o.furigana &&
          hihyoji == o.hihyoji
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sequence_number, corporate_number, process, correct, update_date, change_date, name, name_image_id, kind, prefecture_name, city_name, street_number, address_image_id, prefecture_code, city_code, post_code, address_outside, address_outside_image_id, close_date, close_cause, successor_corporate_number, change_cause, assignment_date, latest, en_name, en_prefecture_name, en_city_name, en_address_outside, furigana, hihyoji].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = CnsOpenapiRubyClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
